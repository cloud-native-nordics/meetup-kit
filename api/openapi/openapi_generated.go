// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.Company":           schema_pkg_apis_meetops_v1alpha1_Company(ref),
		"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.CompanyRef":        schema_pkg_apis_meetops_v1alpha1_CompanyRef(ref),
		"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.Meetup":            schema_pkg_apis_meetops_v1alpha1_Meetup(ref),
		"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.MeetupGroup":       schema_pkg_apis_meetops_v1alpha1_MeetupGroup(ref),
		"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.MeetupGroupSpec":   schema_pkg_apis_meetops_v1alpha1_MeetupGroupSpec(ref),
		"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.MeetupGroupStatus": schema_pkg_apis_meetops_v1alpha1_MeetupGroupStatus(ref),
		"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.MeetupSpec":        schema_pkg_apis_meetops_v1alpha1_MeetupSpec(ref),
		"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.MeetupSponsor":     schema_pkg_apis_meetops_v1alpha1_MeetupSponsor(ref),
		"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.MeetupStatus":      schema_pkg_apis_meetops_v1alpha1_MeetupStatus(ref),
		"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.Presentation":      schema_pkg_apis_meetops_v1alpha1_Presentation(ref),
		"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.Speaker":           schema_pkg_apis_meetops_v1alpha1_Speaker(ref),
		"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.SpeakerRef":        schema_pkg_apis_meetops_v1alpha1_SpeakerRef(ref),
	}
}

func schema_pkg_apis_meetops_v1alpha1_Company(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMeta": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "ObjectMeta defines metadata like a human-readable name, and the machine-readable ID",
							Ref:         ref("github.com/weaveworks/gitops-toolkit/pkg/runtime.ObjectMeta"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"websiteURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"logoURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"whiteLogo": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
				Required: []string{"TypeMeta", "metadata", "id", "name", "websiteURL", "logoURL"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/gitops-toolkit/pkg/runtime.ObjectMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"},
	}
}

func schema_pkg_apis_meetops_v1alpha1_CompanyRef(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"Ref": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.Company"),
						},
					},
					"ID": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"Ref", "ID"},
			},
		},
		Dependencies: []string{
			"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.Company"},
	}
}

func schema_pkg_apis_meetops_v1alpha1_Meetup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMeta": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "ObjectMeta defines metadata like a human-readable name, and the machine-readable ID",
							Ref:         ref("github.com/weaveworks/gitops-toolkit/pkg/runtime.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.MeetupSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.MeetupStatus"),
						},
					},
				},
				Required: []string{"TypeMeta", "metadata", "spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.MeetupSpec", "github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.MeetupStatus", "github.com/weaveworks/gitops-toolkit/pkg/runtime.ObjectMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"},
	}
}

func schema_pkg_apis_meetops_v1alpha1_MeetupGroup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMeta": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "ObjectMeta defines metadata like a human-readable name, and the machine-readable ID",
							Ref:         ref("github.com/weaveworks/gitops-toolkit/pkg/runtime.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.MeetupGroupSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.MeetupGroupStatus"),
						},
					},
				},
				Required: []string{"TypeMeta", "metadata", "spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.MeetupGroupSpec", "github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.MeetupGroupStatus", "github.com/weaveworks/gitops-toolkit/pkg/runtime.ObjectMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"},
	}
}

func schema_pkg_apis_meetops_v1alpha1_MeetupGroupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"meetupID": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"organizers": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.SpeakerRef"),
									},
								},
							},
						},
					},
					"ignoreMeetupDates": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"cfpLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"latitude": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"number"},
							Format: "double",
						},
					},
					"longitude": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"number"},
							Format: "double",
						},
					},
					"ecosystemMembers": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.CompanyRef"),
									},
								},
							},
						},
					},
					"meetups": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.Meetup"),
									},
								},
							},
						},
					},
				},
				Required: []string{"meetupID", "organizers", "cfpLink", "latitude", "longitude", "ecosystemMembers", "meetups"},
			},
		},
		Dependencies: []string{
			"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.CompanyRef", "github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.Meetup", "github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.SpeakerRef"},
	}
}

func schema_pkg_apis_meetops_v1alpha1_MeetupGroupStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"photo": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"city": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"country": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sponsorTiers": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "city", "country", "description", "sponsorTiers"},
			},
		},
	}
}

func schema_pkg_apis_meetops_v1alpha1_MeetupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"recording": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sponsors": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.MeetupSponsor"),
									},
								},
							},
						},
					},
					"presentations": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.Presentation"),
									},
								},
							},
						},
					},
				},
				Required: []string{"recording", "sponsors", "presentations"},
			},
		},
		Dependencies: []string{
			"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.MeetupSponsor", "github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.Presentation"},
	}
}

func schema_pkg_apis_meetops_v1alpha1_MeetupSponsor(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"company": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.CompanyRef"),
						},
					},
				},
				Required: []string{"role", "company"},
			},
		},
		Dependencies: []string{
			"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.CompanyRef"},
	}
}

func schema_pkg_apis_meetops_v1alpha1_MeetupStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"photo": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"date": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"duration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"attendees": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"address": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"id", "name", "address"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Duration", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_meetops_v1alpha1_Presentation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"duration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"delay": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"slides": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"recording": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"speakers": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.SpeakerRef"),
									},
								},
							},
						},
					},
				},
				Required: []string{"duration", "title", "slides", "speakers"},
			},
		},
		Dependencies: []string{
			"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.SpeakerRef", "k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema_pkg_apis_meetops_v1alpha1_Speaker(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMeta": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "ObjectMeta defines metadata like a human-readable name, and the machine-readable ID",
							Ref:         ref("github.com/weaveworks/gitops-toolkit/pkg/runtime.ObjectMeta"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"email": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"company": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.CompanyRef"),
						},
					},
					"github": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"twitter": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"speakersBureau": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"TypeMeta", "metadata", "id", "name", "email", "company", "github", "speakersBureau"},
			},
		},
		Dependencies: []string{
			"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.CompanyRef", "github.com/weaveworks/gitops-toolkit/pkg/runtime.ObjectMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"},
	}
}

func schema_pkg_apis_meetops_v1alpha1_SpeakerRef(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"Ref": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.Speaker"),
						},
					},
					"ID": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"Ref", "ID"},
			},
		},
		Dependencies: []string{
			"github.com/cloud-native-nordics/meetup-kit/pkg/apis/meetops/v1alpha1.Speaker"},
	}
}
